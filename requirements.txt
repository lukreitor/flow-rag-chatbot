Sure! Hereâ€™s a refined version of your prompt in English:

---

### Project Prompt: Chatbot Development Challenge

I need to create a chatbot using the technologies described below:

1. **User Stories and API Integration**:
   - Set up backend integration with CI&T Flow APIs for user authentication and data handling.
   - Implement RAG (Retrieval-Augmented Generation) load and processing to load, parse, and use text and PDF documents in the RAG process.

2. **Response Handling**:
   - Display responses in the chat history, clearly distinguished from user messages.
   - Process user messages using RAG and CI&T Flow APIs to generate responses.

3. **Document Upload Feature**:
   - Allow users to upload documents to enhance LLM responses, improving context and relevance.

4. **Chatbot User Journey**:
   - The user journey involves a cycle of user input in the UI, processing messages (text or documents), and RAG in the backend (leveraging CI&T Flow LLMs). Responses generated by the chatbot will be displayed in the UI.
   - Document upload enhances the RAG process by providing additional context.

5. **Backend Process**:
   - Upon receiving a request, the backend API initiates the RAG process, generating embeddings for user input and retrieving relevant document chunks from a vector store populated with pre-loaded and optionally user-uploaded documents.
   - The backend leverages CI&T Flow LLMs to generate responses based on the retrieved context.
   - The system should be able to parse uploaded documents and create embeddings or generate query embeddings using Langchain before retrieving relevant document chunks.

6. **Technology Stack**:
   - Use FastAPI, Langchain, React, and CI&T Flow APIs.
   - Develop locally with Docker on Windows.
   - Authentication can be simplified using nicknames instead of complex authentication methods.
   - Choose the most suitable database for the project.
   - Ensure the chat context is reasonable and relevant.

7. **Frontend Requirements**:
   - The frontend should be built with TypeScript, including ESLint, Prettier configurations, and a good UI framework (consider using Chakra UI).
   - Implement testing frameworks such as Playwright for end-to-end testing and Vitest for unit testing.

8. **Backend Compliance**:
   - The backend must adhere to project recommendations and confirm to the specified file structure.

9. **Documentation**:
   - Create a `docs` folder containing the following files:
     - `architecture.md`: System architecture and key design decisions.
     - `api-reference.md`: REST API contracts and sample payloads.
     - `operations-runbook.md`: On-call, troubleshooting, and rotation procedures.
     - `requirements-coverage.md`: Detailed mapping from assignment requirements to implementation.
     - `feature-checklist.md`: Checkbox summary of core and bonus features.
     - `test-scenarios.md`: Exhaustive manual/automated test catalog.
     - `deployment-guide.md`: Production-ready rollout steps for Vercel + Render + Atlas + Upstash.
     - `demo-script.md`: A 10-minute Loom recording script covering every demo milestone.

10. other requirements 
    - github actions
    - para o open ai use um worker separado

---

